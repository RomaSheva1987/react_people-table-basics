{"version":3,"sources":["components/pages/HomePage.tsx","api.ts","components/Loader/Loader.tsx","types/Gender.tsx","components/PersonLink.tsx","components/peopleTable/PeopleTable.tsx","components/utils/taskUtils.tsx","components/pages/PeoplePage.tsx","components/pages/ErrorPage.tsx","types/Pages.tsx","components/NavbarLink.tsx","components/Navbar.tsx","App.tsx","index.tsx"],"names":["HomePage","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","Gender","PersonLink","person","to","slug","classNames","sex","Female","name","PeopleTable","people","isLoading","isError","selectedSlug","useParams","length","map","born","died","motherName","fatherName","mother","father","getLinkClass","isActive","getLinkStyle","color","PeoplePage","useState","setPeople","setIsLoading","setIsError","peopleWithParents","useMemo","find","mom","dad","preparePeopleData","useEffect","catch","finally","ErrorPage","Pages","NavbarLink","page","Home","toLowerCase","style","Navbar","role","People","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.1366119b.chunk.js","sourcesContent":["export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export enum Gender {\n  Male = 'm',\n  Female = 'f',\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types';\nimport { Gender } from '../types/Gender';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => (\n  <Link\n    to={`/people/${person.slug}`}\n    className={classNames({\n      'has-text-danger': person.sex === Gender.Female,\n    })}\n  >\n    {person.name}\n  </Link>\n);\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PersonLink } from '../PersonLink';\n\nimport './PeopleTable.scss';\n\ntype Props = {\n  people: Person[] | null;\n  isLoading: boolean;\n  isError: boolean\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n  isLoading,\n  isError,\n}) => {\n  const { selectedSlug } = useParams();\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container has-min-height\">\n        {isLoading && (\n          <Loader />\n        )}\n\n        {isError ? (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        ) : (\n          <>\n            {!isLoading && people?.length === 0 && (\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p>\n            )}\n            {!isLoading && !!people?.length && (\n              <table\n                data-cy=\"peopleTable\"\n                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n              >\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Sex</th>\n                    <th>Born</th>\n                    <th>Died</th>\n                    <th>Mother</th>\n                    <th>Father</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {people.map(person => {\n                    const {\n                      sex,\n                      born,\n                      died,\n                      slug,\n                      motherName,\n                      fatherName,\n                      mother,\n                      father,\n                    } = person;\n\n                    return (\n                      <tr\n                        data-cy=\"person\"\n                        key={slug}\n                        className={classNames({\n                          'has-background-warning': slug === selectedSlug,\n                        })}\n                      >\n                        <td>\n                          <PersonLink person={person} />\n                        </td>\n\n                        <td>{sex}</td>\n                        <td>{born}</td>\n                        <td>{died}</td>\n                        {mother ? (\n                          <td>\n                            <PersonLink person={mother} />\n                          </td>\n                        ) : (\n                          <td>\n                            {motherName || '-'}\n                          </td>\n                        )}\n                        {father ? (\n                          <td>\n                            <PersonLink person={father} />\n                          </td>\n                        ) : (\n                          <td>\n                            {fatherName || '-'}\n                          </td>\n                        )}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { Person } from '../../types';\n\nexport const getLinkClass = ({ isActive }: { isActive: boolean }) => classNames(\n  'navbar-item',\n  {\n    'has-background-grey-lighter': isActive,\n  },\n);\n\nexport const getLinkStyle = (\n  { isActive }: { isActive: boolean },\n) => (\n  { color: isActive ? 'red' : '' }\n);\n\nexport const preparePeopleData = (people: Person[] | null) => {\n  if (people) {\n    return people.map(person => {\n      const mother = people.find((mom) => mom.name === person.motherName);\n      const father = people.find((dad) => dad.name === person.fatherName);\n\n      return { ...person, mother, father };\n    });\n  }\n\n  return null;\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { PeopleTable } from '../peopleTable/PeopleTable';\nimport { preparePeopleData } from '../utils/taskUtils';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const peopleWithParents = useMemo(() => {\n    return preparePeopleData(people);\n  }, [people]);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <PeopleTable\n        people={peopleWithParents}\n        isLoading={isLoading}\n        isError={isError}\n      />\n    </>\n  );\n};\n","export const ErrorPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export enum Pages {\n  Home = 'Home',\n  People = 'People',\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Pages } from '../types/Pages';\nimport { getLinkClass, getLinkStyle } from './utils/taskUtils';\n\ntype Props = {\n  page: string;\n};\n\nexport const NavbarLink: React.FC<Props> = ({ page }) => {\n  return (\n    <NavLink\n      to={page === Pages.Home ? '/' : `/${page.toLowerCase()}`}\n      className={getLinkClass}\n      style={getLinkStyle}\n    >\n      {page}\n    </NavLink>\n  );\n};\n","import { NavbarLink } from './NavbarLink';\nimport { Pages } from '../types/Pages';\n\nexport const Navbar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavbarLink page={Pages.Home} />\n\n        <NavbarLink page={Pages.People} />\n      </div>\n    </div>\n  </nav>\n);\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport './App.scss';\n\nimport { HomePage } from './components/pages/HomePage';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { ErrorPage } from './components/pages/ErrorPage';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":selectedSlug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<ErrorPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}